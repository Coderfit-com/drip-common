datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  email     String        @unique @db.VarChar(255)
  picture   String?
  firstName String        @db.VarChar(255)
  lastName  String?       @db.VarChar(255)
  role      UserRole      @default(USER)
  isActive  Boolean       @default(true)
  sessions  UserSession[]
  sequences Sequence[]
}

model UserSession {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  accessToken    String
  provider       AuthProvider @default(GOOGLE)
  providerId     String       @unique
  providerEmail  String       @db.VarChar(255)
  refreshToken   String
  expirationTime DateTime
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String       @db.VarChar(255)
}

model Sequence {
  id           String             @id @default(cuid())
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  name         String             @db.VarChar(255)
  status       SequenceStatus     @default(ACTIVE)
  type         SequenceType       @default(SOURCING)
  lastActivity DateTime           @default(now())
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String             @db.VarChar(255)
  recipients   Contact[]
  stages       SequenceStage[]
  activities   SequenceActivity[]
  sequenceTags SequenceTags[]
  queue        SequenceQueue[]
}

model SequenceTags {
  id        String     @id @default(cuid())
  name      String     @unique @db.VarChar(255)
  sequences Sequence[]
  userId    String     @db.VarChar(255)
}

model SequenceStage {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  type         StageType @default(EMAIL)
  order        Int       @default(1)
  scheduledFor String    @default("now")
  asReply      Boolean   @default(true)
  emailFrom    String    @db.VarChar(255)
  emailCc      String    @db.VarChar(255)
  emailSubject String    @db.VarChar(255)
  emailBody    String
  sequence     Sequence  @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  sequenceId   String    @db.VarChar(255)
}

model SequenceQueue {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  type         StageType @default(EMAIL)
  order        Int       @default(1)
  scheduledFor String    @default("now")
  asReply      Boolean   @default(true)
  emailFrom    String    @db.VarChar(255)
  emailCc      String    @db.VarChar(255)
  emailSubject String    @db.VarChar(255)
  emailBody    String
  sequence     Sequence  @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  sequenceId   String    @db.VarChar(255)
  contactId    String    @db.VarChar(255)
}

model SequenceActivity {
  id            String                  @id @default(cuid())
  createdAt     DateTime                @default(now())
  sequence      Sequence                @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  sequenceId    String                  @db.VarChar(255)
  contactId     String                  @db.VarChar(255)
  contactStatus ContactInSequenceStatus @default(ACTIVE)
  currentStage  Int
  type          ActivityType
}

model Contact {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  firstName String            @db.VarChar(255)
  lastName  String?           @db.VarChar(255)
  company   String?           @db.VarChar(255)
  title     String?           @db.VarChar(255)
  location  String?           @db.VarChar(255)
  resume    String?           @db.VarChar(255)
  userId    String            @db.VarChar(255)
  emails    String[]
  profiles  String[]
  type      OutreachMethod    @default(MANUAL)
  sequences Sequence[]
  tags      ContactTags[]
  lists     ContactLists[]
}

model ContactTags {
  id       String    @id @default(cuid())
  name     String    @unique @db.VarChar(255)
  contacts Contact[]
  userId   String    @db.VarChar(255)
}

model ContactLists {
  id       String    @id @default(cuid())
  name     String    @db.VarChar(255)
  contacts Contact[]
}

enum AuthProvider {
  GOOGLE
}

enum UserRole {
  USER
  PROMO
  MANAGER
  ADMIN
}

enum SequenceStatus {
  ACTIVE
  PAUSED
  ARCHIVED
}

enum SequenceType {
  SOURCING
  EVENT
  NURTURE
}

enum StageType {
  EMAIL
  INMAIL
  SMS
  PHONE
}

enum ActivityType {
  OPENED // Email was opened.
  REPLIED // Contact replied to your email.
  SENT // Email was sent, but haven't opened yet.
}

enum OutreachMethod {
  MANUAL
  LINKEDIN
}

enum ContactInSequenceStatus {
  UNSUBSCRIBED // This person in unsubscribed. You cannot contact them.
  FINISHED // You received a responce and the sequence has stopped automatically.
  ACTIVE // Currently active.
  PAUSED // This sequence has been paused. If you want to send remaining stages, select it and click resume.
  BOUNCED // Your sequence bounced. Use another email address or try a different outreach method instead.
}
