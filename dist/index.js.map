{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEAA,MAAM,iCAAW,GAAG;IAClB,UAAU;IACV,OAAO,EAAE,GAAG;IACZ,mBAAmB,EAAE,GAAG;IACxB,YAAY,EAAE,KAAK;IAEnB,iBAAiB;IACjB,aAAa,EAAE,KAAK;IACpB,cAAc,EAAE,KAAK;CACtB,AAAC;IAEF,wCAA2B,GAAZ,iCAAW;;ADX1B;;;;AEAA,MAAM,wCAAiB,GAAG;IACxB,gBAAgB,EAAE,WAAW;IAC7B,eAAe,EAAE,UAAU;IAC3B,aAAa,EAAE,SAAS;IACxB,cAAc,EAAE,UAAU;IAC1B,WAAW,EAAE,OAAO;IACpB,iBAAiB,EAAE,aAAa;CACjC,AAAC;;;;;;AHPF;;;;;AKAA,SAAS,yCAAmB,CAAC,KAAK,GAAG,EAAE,EAAE,KAAK,GAAG,EAAE,EAAE,eAAe,GAAG,EAAE,EAAE;IACzE,IAAI,MAAM,GAAG;QAAC,IAAI;QAAE,IAAI;KAAC,AAAC;IAE1B,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,GAAK;QAChC,IAAI,OAAO,CAAC,eAAe,CAAC,KAAK,KAAK,EACpC,MAAM,GAAG;YAAC,OAAO;YAAE,KAAK;SAAC,CAAC;KAE7B,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;CACf;;ADVD;;;;AEAA,SAAS,yCAAY,CACnB,MAAS,EACT,GAAG,IAAI,AAAO,EACA;IACd,KAAK,MAAM,GAAG,IAAI,IAAI,CACpB,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;IAErB,OAAO,MAAM,CAAC;CACf;;;;;;ACRD,eAAe,yCAAI,CAAC,EAAU,EAAkB;IAC9C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,GAAK;QAC9B,UAAU,CAAC,IAAM,OAAO,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;KACtC,CAAC,CAAC;CACJ;;;;;;ACJD;;AAAA,SAAS,yCAAmB,CAAC,GAAG,EAAE;IAChC,MAAM,iBAAiB,GAAG,iCAAO,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,AAAC;IAEtE,OAAO,iBAAiB,CAAC;CAC1B;;;;;;;;ACJD,SAAS,yCAAkB,CAAC,IAAI,GAAG,CAAC,EAAE;IACpC,OAAO,IAAI,GAAJ,QAA0B,CAAC;CACnC;AAED,SAAS,yCAAoB,CAAC,IAAU,EAAE;IACxC,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;QAAE,QAAQ,EAAE,aAAa;KAAE,CAAC,AAAC;IAC7E,OAAO,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;CAC9C;AAED,SAAS,yCAAoB,CAAC,MAAc,EAAE;IAC5C,6BAA6B;IAC7B,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAC1E,IAAI,MAAM,KAAK,KAAK,EAAE,OAAO,CAAC,CAAC;IAE/B,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC;IACjC,MAAM,UAAU,GAAG,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,AAAC;IAEtC,IAAI,UAAU,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;IAE/B,OAAO,yCAAkB,CAAC,UAAU,CAAC,CAAC;CACvC;;;;;;;;","sources":["src/index.ts","src/constants/index.ts","src/constants/errorCodes.ts","src/constants/templates.ts","src/utils/index.ts","src/utils/array.ts","src/utils/object.ts","src/utils/promise.ts","src/utils/string.ts","src/utils/time.ts"],"sourcesContent":["export * from './constants';\nexport * from './utils';\n","export * from \"./errorCodes\";\nexport * from \"./templates\";\n","const ERROR_CODES = {\n  // General\n  TIMEOUT: 504,\n  SERVICE_UNAVAILABLE: 503,\n  FAILED_FETCH: 50301,\n\n  // Authentication\n  INVALID_GRANT: 40101,\n  INVALID_SCOPES: 40102,\n};\n\nexport default ERROR_CODES;\n","const templateVariables = {\n  '{{first_name}}': 'firstName',\n  '{{last_name}}': 'lastName',\n  '{{company}}': 'company',\n  '{{location}}': 'location',\n  '{{title}}': 'title',\n  '{{day_of_week}}': 'day_of_week',\n};\n\nexport { templateVariables };\n","export * from \"./array\";\nexport * from \"./object\";\nexport * from \"./promise\";\nexport * from \"./string\";\nexport * from \"./time\";\n","function searchInArrayByProp(value = '', array = [], elementProperty = '') {\n  let result = [null, null];\n\n  array.forEach((element, index) => {\n    if (element[elementProperty] === value) {\n      result = [element, index];\n    }\n  });\n\n  return result;\n}\n\nexport { searchInArrayByProp };\n","function excludeProps<T, Key extends keyof T>(\n  object: T,\n  ...keys: Key[]\n): Omit<T, Key> {\n  for (const key of keys) {\n    delete object[key];\n  }\n  return object;\n}\n\nexport { excludeProps };\n","async function wait(ms: number): Promise<false> {\n  return new Promise((resolve) => {\n    setTimeout(() => resolve(false), ms);\n  });\n}\n\nexport { wait };\n","function base64DecodeUnicode(str) {\n  const percentEncodedStr = Buffer.from(str, 'base64').toString('utf8');\n\n  return percentEncodedStr;\n}\n\nexport { base64DecodeUnicode };\n","function daysToMilliseconds(days = 1) {\n  return days * 24 * 60 * 60 * 1000;\n}\n\nfunction dateToDayMonthString(date: Date) {\n  const dateString = date.toLocaleString('en-US', { timeZone: 'Europe/Kiev' });\n  return dateString.split(',')[0].slice(0, -5);\n}\n\nfunction stringToMilliseconds(string: string) {\n  // examples: now | 7 d | 8 bd\n  if (typeof string !== 'string') throw new Error('Input should be string');\n  if (string === 'now') return 0;\n\n  const [days] = string.split(' ');\n  const daysNumber = parseInt(days, 10);\n\n  if (daysNumber === 0) return 0;\n\n  return daysToMilliseconds(daysNumber);\n}\n\nexport { daysToMilliseconds, dateToDayMonthString, stringToMilliseconds };\n"],"names":[],"version":3,"file":"index.js.map"}